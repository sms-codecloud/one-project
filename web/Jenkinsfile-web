pipeline {
  agent { label 'win-dev' }
  options { disableConcurrentBuilds(); timestamps() }

  parameters {
    string(name: 'AWS_REGION', defaultValue: 'ap-south-1', description: 'AWS region')
    string(name: 'EC2_INSTANCE_ID', defaultValue: '', description: 'EC2 instance ID (from infra outputs)')
    string(name: 'ARTIFACT_BUCKET', defaultValue: 'arj-bootcamp', description: 'S3 bucket for deploy artifacts')
    string(name: 'APP_REL_PATH', defaultValue: 'web', description: 'Relative path to React app folder')
    string(name: 'APP_NAME', defaultValue: 'student-web', description: 'Bundle name prefix')
    choice(name: 'NODE_MODE', choices: ['production','development'], description: 'NODE_ENV')
  }

  environment {
    NODE_ENV = "${params.NODE_MODE}"
    PATH = "C:\\Program Files\\nodejs;C:\\Program Files\\Amazon\\AWSCLIV2;${env:PATH}"
  }

  stages {
    stage('Checkout') {
      steps {
        deleteDir()
        checkout scm
      }
    }

    stage('Install & Build') {
      steps {
        dir("${params.APP_REL_PATH}") {
          // use cmd to avoid PowerShell execution policy on npm.ps1
          bat "cmd /c npm --version"
          bat "cmd /c npm install"
          bat "cmd /c npm run build"
          bat 'powershell -NoProfile -ExecutionPolicy Bypass -Command "Compress-Archive -Path dist\\* -DestinationPath web.zip -Force"'
          archiveArtifacts artifacts: "${params.APP_REL_PATH}\\web.zip", fingerprint: true
        }
      }
    }

    stage('Upload to S3') {
      steps {
        withCredentials([[$class:'AmazonWebServicesCredentialsBinding', credentialsId:'aws_secrets_shankar']]) {
          dir("${params.APP_REL_PATH}") {
            script {
              def key = "web/${params.APP_NAME}-${env.BUILD_NUMBER}.zip"
              bat "aws s3 cp web.zip s3://${params.ARTIFACT_BUCKET}/${key} --region ${params.AWS_REGION}"
              env.S3_KEY = key
            }
          }
        }
      }
    }

    stage('Deploy via SSM') {
      steps {
        withCredentials([[$class:'AmazonWebServicesCredentialsBinding', credentialsId:'aws_secrets_shankar']]) {
          script {
            def ps = """
                $ErrorActionPreference = 'Stop'
                aws --version | Out-Null
                \$bucket='${params.ARTIFACT_BUCKET}'
                \$key='${env.S3_KEY}'
                \$zip='C:\\\\deploy\\\\incoming\\\\web.zip'
                if (Test-Path \$zip) { Remove-Item \$zip -Force }
                aws s3 cp "s3://\$bucket/\$key" \$zip --region ${params.AWS_REGION}

                # Unzip and swap IIS site content
                \$temp = "C:\\\\deploy\\\\incoming\\\\web_unzip"
                if (Test-Path \$temp) { Remove-Item \$temp -Recurse -Force }
                New-Item -ItemType Directory -Path \$temp | Out-Null
                Add-Type -AssemblyName System.IO.Compression.FileSystem
                [System.IO.Compression.ZipFile]::ExtractToDirectory(\$zip,\$temp)

                # Replace site root
                Import-Module WebAdministration
                Stop-WebSite -Name "one-project"
                if (Test-Path "C:\\\\deploy\\\\web") { Remove-Item "C:\\\\deploy\\\\web\\*" -Recurse -Force -ErrorAction SilentlyContinue }
                Copy-Item "\$temp\\*" "C:\\\\deploy\\\\web" -Recurse -Force
                Start-WebSite -Name "one-project"
            """
            bat """
              aws ssm send-command ^
                --instance-ids ${params.EC2_INSTANCE_ID} ^
                --document-name "AWS-RunPowerShellScript" ^
                --parameters commands="${ps.replace('"','\\"').replace("\n","`n")}" ^
                --region ${params.AWS_REGION} ^
                --query "Command.CommandId" --output text > cmdid.txt
            """
            bat 'set /p CMDID=<cmdid.txt & echo SSM CommandId=%CMDID%'
          }
        }
      }
    }
  }
}