pipeline {
  agent { label 'win-dev' }
  options { disableConcurrentBuilds(); timestamps() }

  parameters {
    string(name: 'AWS_REGION',       defaultValue: 'ap-south-1', description: 'AWS region')
    string(name: 'EC2_INSTANCE_ID',  defaultValue: '',           description: 'EC2 instance ID (from infra outputs)')
    string(name: 'ARTIFACT_BUCKET',  defaultValue: 'arj-bootcamp', description: 'S3 bucket for deploy artifacts')
    string(name: 'APP_REL_PATH',     defaultValue: 'web',        description: 'Relative path to React app folder')
    string(name: 'APP_NAME',         defaultValue: 'student-web', description: 'Bundle name prefix')
    choice(name: 'NODE_MODE',        choices: ['production','development'], description: 'NODE_ENV')
  }

  environment {
    NODE_ENV = "${params.NODE_MODE}"
    // âœ… Use Groovy env var syntax, not PowerShell:
    PATH = "C:\\Program Files\\nodejs;C:\\Program Files\\Amazon\\AWSCLIV2;${env.PATH}"
    // Ensure this is always defined:
    FORCED_WS = 'D:\\jenkins-workspace\\workspace'
  }

  stages {
    stage('Prepare Workspace & Checkout') {
      steps {
        ws("${env.FORCED_WS}") {
          deleteDir()
          checkout scm
          bat 'cd & dir /b'
        }
      }
    }

    stage('Install & Build (local)') {
      steps {
        ws("${env.FORCED_WS}") {
          dir("${params.APP_REL_PATH}") {
            // Force devDeps install for the build (Vite lives in devDependencies)
            withEnv(['NODE_ENV=development', 'NPM_CONFIG_PRODUCTION=false']) {
              bat 'cmd /c node -v'
              bat 'cmd /c npm -v'

              // Prefer ci if lockfile exists; ensure dev deps are included
              bat 'cmd /c if exist package-lock.json (npm ci --include=dev) else (npm install)'

              // Run the package script (will find local vite now)
              bat 'cmd /c npm run build'
            }

            // Detect output dir (vite=dist, CRA=build), then zip it
            bat '''
              if exist dist ( set "BUILD_DIR=dist" ) else ( set "BUILD_DIR=build" )
              rem Trim any stray spaces and show the value clearly
              for /f "tokens=* delims= " %%A in ("%BUILD_DIR%") do set "BUILD_DIR=%%~A"
              echo BUILD_DIR=[%BUILD_DIR%]

              if not exist "%BUILD_DIR%" (
                echo ERROR: No dist/ or build/ output folder found.& exit /b 2
              )

              if exist web.zip del /q web.zip

              powershell -NoProfile -ExecutionPolicy Bypass -Command ^
                "$bd = $env:BUILD_DIR.Trim(); Compress-Archive -Path (Join-Path $bd '*') -DestinationPath web.zip -Force"

              dir web.zip
            '''
            archiveArtifacts artifacts: "${params.APP_REL_PATH}\\web.zip", fingerprint: true
          }
        }
      }
   }


    stage('Upload to S3') {
      steps {
        ws("${env.FORCED_WS}") {
          withCredentials([[$class:'AmazonWebServicesCredentialsBinding', credentialsId:'aws_secrets_shankar']]) {
            dir("${params.APP_REL_PATH}") {
              script {
                def key = "web/${params.APP_NAME}-${env.BUILD_NUMBER}.zip"
                bat "aws s3 cp web.zip s3://${params.ARTIFACT_BUCKET}/${key} --region ${params.AWS_REGION}"
                env.S3_KEY = key
                echo "Uploaded to s3://${params.ARTIFACT_BUCKET}/${key}"
              }
            }
          }
        }
      }
    }

    stage('Deploy to EC2 via SSM (IIS swap)') {
      when { expression { return params.EC2_INSTANCE_ID?.trim() } }
      steps {
        ws("${env.FORCED_WS}") {
          withCredentials([[$class:'AmazonWebServicesCredentialsBinding', credentialsId:'aws_secrets_shankar']]) {
            script {
              def ps = """
                \$ErrorActionPreference = 'Stop'
                aws --version | Out-Null

                \$bucket='${params.ARTIFACT_BUCKET}'
                \$key='${env.S3_KEY}'
                \$zip='C:\\\\deploy\\\\incoming\\\\web.zip'
                \$temp='C:\\\\deploy\\\\incoming\\\\web_unzip'
                \$siteRoot='C:\\\\deploy\\\\web'
                \$siteName='one-project'

                New-Item -ItemType Directory -Force -Path (Split-Path \$zip) | Out-Null
                New-Item -ItemType Directory -Force -Path \$siteRoot | Out-Null

                if (Test-Path \$zip) { Remove-Item \$zip -Force }
                aws s3 cp "s3://\$bucket/\$key" \$zip --region ${params.AWS_REGION}

                if (Test-Path \$temp) { Remove-Item \$temp -Recurse -Force }
                New-Item -ItemType Directory -Force -Path \$temp | Out-Null
                Add-Type -AssemblyName System.IO.Compression.FileSystem
                [System.IO.Compression.ZipFile]::ExtractToDirectory(\$zip, \$temp)

                Import-Module WebAdministration
                if (Get-Website -Name \$siteName -ErrorAction SilentlyContinue) {
                  Stop-WebSite -Name \$siteName -ErrorAction SilentlyContinue
                }

                if (Test-Path \$siteRoot) {
                  Get-ChildItem -Path \$siteRoot -Force | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
                } else {
                  New-Item -ItemType Directory -Force -Path \$siteRoot | Out-Null
                }

                Copy-Item "\$temp\\*" \$siteRoot -Recurse -Force

                if (Get-Website -Name \$siteName -ErrorAction SilentlyContinue) {
                  Start-WebSite -Name \$siteName
                } else {
                  New-Website -Name \$siteName -PhysicalPath \$siteRoot -Port 80 -Force
                }

                Write-Host "Deployed static site to \$siteRoot"
              """

              bat """
                aws ssm send-command ^
                  --instance-ids ${params.EC2_INSTANCE_ID} ^
                  --document-name "AWS-RunPowerShellScript" ^
                  --parameters commands="${ps.replace('"','\\"').replace("\n","`n")}" ^
                  --region ${params.AWS_REGION} ^
                  --query "Command.CommandId" --output text > cmdid.txt
              """
              bat 'set /p CMDID=<cmdid.txt & echo SSM CommandId=%CMDID%'
            }
          }
        }
      }
    }
  }

  post {
    always {
      echo "Done. Workspace used: ${env.FORCED_WS}"
    }
  }
}
