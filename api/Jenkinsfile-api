pipeline {
  agent { label 'win-dev' } // your Windows agent label

  options {
    timestamps()
    ansiColor('xterm')
    disableConcurrentBuilds()
  }

  parameters {
    string(name: 'AWS_REGION',      defaultValue: 'ap-south-1',  description: 'AWS region')
    string(name: 'AWS_CREDS_ID',    defaultValue: 'aws_secrets_shankar', description: 'Jenkins AWS creds ID')
    string(name: 'EC2_INSTANCE_ID', defaultValue: '',            description: 'Target Windows EC2 instance id (SSM)')
    string(name: 'S3_BUCKET',       defaultValue: 'arj-bootcamp',description: 'Artifact bucket')
    string(name: 'S3_KEY',          defaultValue: 'api/student-api-11.zip', description: 'Artifact key (zip)')
    string(name: 'MYSQL_APP_PASSWORD', defaultValue: '', description: 'MySQL password for student_user (as secret text in prod)')
    string(name: 'PROJECT_REL',     defaultValue: 'one-project/api', description: 'API project path (relative to repo root)')
    choice(name: 'CONFIG',          choices: ['Release','Debug'], description: 'Build configuration')
    booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'Run tests if found')
  }

  environment {
    DOTNET_CLI_TELEMETRY_OPTOUT       = '1'
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE = '1'
    PUBLISH_DIR  = 'publish'
    ARTIFACT_ZIP = 'student-api.zip'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        bat 'ver'
      }
    }

    stage('Restore & Build') {
      steps {
        dir("${params.PROJECT_REL}") {
          powershell """
            \$ErrorActionPreference = 'Stop'
            dotnet --info
            dotnet restore
            dotnet build -c ${params.CONFIG} --no-restore
          """
        }
      }
    }

    stage('Test') {
      when { expression { return params.RUN_TESTS } }
      steps {
        powershell '''
          $tests = Get-ChildItem -Recurse -Filter *.csproj | Where-Object { $_.FullName -match '(?i)test|tests' }
          if ($tests) {
            foreach ($t in $tests) { dotnet test $t.FullName -c $env:CONFIG --no-build --logger "trx;LogFileName=TestResults.trx" }
          } else { Write-Host "No tests found." }
        '''
      }
      post {
        always { junit allowEmptyResults: true, testResults: '**/TestResults/*.xml' }
      }
    }

    stage('Publish & Package') {
      steps {
        dir("${params.PROJECT_REL}") {
          powershell """
            Remove-Item -Recurse -Force -ErrorAction SilentlyContinue '${env:PUBLISH_DIR}'
            dotnet publish -c ${params.CONFIG} -o '${env:PUBLISH_DIR}' --no-restore
          """
        }
        dir("${params.PROJECT_REL}\\${env:PUBLISH_DIR}") {
          powershell """
            if (!(Test-Path 'StudentApi.dll')) { throw 'StudentApi.dll not found in publish output.' }
            if (Test-Path '${env:WORKSPACE}\\${env:ARTIFACT_ZIP}') { Remove-Item -Force '${env:WORKSPACE}\\${env:ARTIFACT_ZIP}' }
            Compress-Archive -Path * -DestinationPath '${env:WORKSPACE}\\${env:ARTIFACT_ZIP}'
          """
        }
        archiveArtifacts artifacts: "${env.ARTIFACT_ZIP}", onlyIfSuccessful: true
      }
    }

    stage('Upload to S3') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: params.AWS_CREDS_ID]]) {
          powershell """
            aws --version
            aws s3 cp '${env:WORKSPACE}\\${env:ARTIFACT_ZIP}' s3://${params.S3_BUCKET}/${params.S3_KEY} --region ${params.AWS_REGION} --only-show-errors
          """
        }
      }
    }

    stage('Deploy via SSM (call script)') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: params.AWS_CREDS_ID]]) {
          powershell """
            \$ErrorActionPreference = 'Stop'
            \$script = Join-Path '${env.WORKSPACE}' '${params.PROJECT_REL}\\deploy-api-ssm.ps1'
            if (!(Test-Path \$script)) { throw "deploy-api-ssm.ps1 not found at \$script" }

            # Call the deployment script
            powershell -ExecutionPolicy Bypass -File "\$script" `
              -InstanceId "${params.EC2_INSTANCE_ID}" `
              -Region     "${params.AWS_REGION}" `
              -Bucket     "${params.S3_BUCKET}" `
              -Key        "${params.S3_KEY}" `
              -MySQLAppPassword "${params.MYSQL_APP_PASSWORD}"
          """
        }
      }
    }

    stage('Summary') {
      steps {
        echo "Deployed ${env.ARTIFACT_ZIP} to EC2 ${params.EC2_INSTANCE_ID} via SSM."
        echo "URL: http://<instance-public-dns>/api (site name: one-project, app: /api)"
      }
    }
  }

  post {
    failure {
      echo "Build failed. Check console logs."
    }
  }
}
