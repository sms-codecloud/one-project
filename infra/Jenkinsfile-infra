pipeline {
  agent { label 'win-dev' }
  options { disableConcurrentBuilds(); timestamps() }

  parameters {
    choice(name: 'TF_ACTION', choices: ['APPLY','DESTROY'], description: 'Terraform action')
    string(name: 'AWS_REGION',  defaultValue: 'ap-south-1', description: 'Region')
    choice(name: 'INSTANCE_TYPE', choices: ['t3.small','t3.micro'], description: 'EC2 size')
    string(name: 'KEY_NAME',    defaultValue: '', description: 'EC2 key pair (leave empty to rely on SSM)')
    string(name: 'HTTP_CIDR',   defaultValue: '0.0.0.0/0', description: 'CIDR for HTTP 80')
    string(name: 'RDP_CIDR',    defaultValue: '0.0.0.0/0', description: 'CIDR for RDP 3389')

    // Taken from user at build time (masked)
    password(name: 'MYSQL_ROOT_PASSWORD', defaultValue: '', description: 'MySQL root password')
    password(name: 'MYSQL_APP_PASSWORD',  defaultValue: '', description: 'MySQL app/user password')
  }

  stages {
    stage('Terraform Init/Plan/Apply') {
      steps {
        withCredentials([
          [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_secrets_shankar']
        ]) {
          dir('infra') {
            bat '''
              @echo off
              rem ----- secrets via TF_VAR_* so they arenâ€™t echoed in plan -----
              set TF_VAR_mysql_root_password=%MYSQL_ROOT_PASSWORD%
              set TF_VAR_mysql_app_password=%MYSQL_APP_PASSWORD%
              @echo on

              setlocal EnableExtensions EnableDelayedExpansion
              set "PATH=C:\\binaries\\terraform;!PATH!"

              terraform --version

              terraform init -reconfigure -upgrade -no-color

              rem Non-secret args only
              set "TF_ARGS=-var=region=%AWS_REGION% -var=instance_type=%INSTANCE_TYPE% -var=key_name=%KEY_NAME% -var=http_cidr=%HTTP_CIDR% -var=rdp_cidr=%RDP_CIDR%"

              if /I "%TF_ACTION%"=="APPLY" (
                terraform plan !TF_ARGS! -out=plan.tfplan -no-color -input=false
                if errorlevel 1 exit /b !errorlevel!
                terraform apply -auto-approve plan.tfplan -no-color -input=false
                if errorlevel 1 exit /b !errorlevel!
              ) else (
                terraform plan -destroy !TF_ARGS! -out=destroy.tfplan -no-color -input=false
                if errorlevel 1 exit /b !errorlevel!
                terraform apply -auto-approve destroy.tfplan -no-color -input=false
                if errorlevel 1 exit /b !errorlevel!
              )

              withEnv:
              rem Show outputs (no secrets printed)
              '''
          }
          // run output separately to ensure clean PATH context
          dir('infra') {
            withEnv(['PATH+TERRAFORM=C:\\binaries\\terraform']) {
              bat 'terraform output -json'
            }
          }
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'infra/*.tfplan', fingerprint: true, allowEmptyArchive: true
    }
  }
}
