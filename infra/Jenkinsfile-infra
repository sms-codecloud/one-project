pipeline {
  agent { label 'win-dev' } // your Windows 11 Jenkins agent label
  options { disableConcurrentBuilds(); timestamps() }

  parameters {
    choice(name: 'TF_ACTION', choices: ['APPLY','DESTROY'], description: 'Terraform action')
    choice(name: 'INSTANCE_TYPE', choices: ['t3.micro','t2.micro','t3.small'], description: 'EC2 size (t3.micro is cheapest; t3.small is NOT free-tier)')
    string(name: 'HTTP_CIDR',   defaultValue: '0.0.0.0/0', description: 'CIDR allowed to HTTP 80')
    string(name: 'RDP_CIDR',    defaultValue: '0.0.0.0/0', description: 'CIDR allowed to RDP 3389')
    string(name: 'KEY_NAME',    defaultValue: 'win-one-project-key-pair', description: 'EC2 key pair name (optional if only using SSM)')
    string(name: 'AWS_REGION',  defaultValue: 'ap-south-1', description: 'AWS region')
    string(name: 'VPC_ID',      defaultValue: 'vpc-0eb3bcb56d10aaefe', description: 'Existing VPC ID (leave empty to create new)')
    string(name: 'SUBNET_ID',   defaultValue: 'subnet-0e55663670ec1908c', description: 'Existing Subnet ID (leave empty to create new)')
  }

  environment {
    TF_IN_AUTOMATION = 'true'
    TF_DIR = 'infra'
  }

  stages {
    stage('Checkout') {
      steps {
        deleteDir()
        checkout scm
        bat 'dir'
      }
    }

    stage('Terraform Init') {
      steps {
        withCredentials([[$class:'AmazonWebServicesCredentialsBinding', credentialsId:'aws_secrets_shankar']]) {
          dir('infra') {
            withEnv([
              'PATH+TERRAFORM=C:\\binaries\\terraform',
              'PATH+AWS=C:\\Program Files\\Amazon\\AWSCLIV2'
            ]) {
              bat 'terraform -version'
              bat 'terraform init -reconfigure -input=false -no-color'
            }
          }
        }
      }
    }

    stage('Terraform Plan') {
      steps {
        withCredentials([[$class:'AmazonWebServicesCredentialsBinding', credentialsId:'aws_secrets_shankar']]) {
          dir('infra') {
            withEnv([
              'PATH+TERRAFORM=C:\\binaries\\terraform',
              'PATH+AWS=C:\\Program Files\\Amazon\\AWSCLIV2'
            ]) {
              bat """
                terraform plan ^
                  -var="region=%AWS_REGION%" ^
                  -var="instance_type=%INSTANCE_TYPE%" ^
                  -var="key_name=%KEY_NAME%" ^
                  -var="http_cidr=%HTTP_CIDR%" ^
                  -var="rdp_cidr=%RDP_CIDR%" ^
                  -out=plan.tfplan -no-color -input=false
              """
              // print a human-readable plan as well
              bat 'terraform show -no-color plan.tfplan'
            }
          }
        }
      }
    }

    stage('Terraform Apply / Destroy') {
      when { anyOf { expression { params.TF_ACTION == 'APPLY' }; expression { params.TF_ACTION == 'DESTROY' } } }
      steps {
        withCredentials([[$class:'AmazonWebServicesCredentialsBinding', credentialsId:'aws_secrets_shankar']]) {
          dir('infra') {
            withEnv([
              'PATH+TERRAFORM=C:\\binaries\\terraform',
              'PATH+AWS=C:\\Program Files\\Amazon\\AWSCLIV2'
            ]) {
              script {
                if (params.TF_ACTION == 'APPLY') {
                  bat 'terraform apply -auto-approve plan.tfplan -no-color'
                } else {
                  bat """
                    terraform destroy ^
                      -var="region=%AWS_REGION%" ^
                      -var="instance_type=%INSTANCE_TYPE%" ^
                      -var="key_name=%KEY_NAME%" ^
                      -var="http_cidr=%HTTP_CIDR%" ^
                      -var="rdp_cidr=%RDP_CIDR%" ^
                      -auto-approve -no-color -input=false
                  """
                }
              }
            }
          }
        }
      }
    }

    stage('Outputs') {
      steps {
        dir('infra') {
          withEnv(['PATH+TERRAFORM=C:\\binaries\\terraform']) {
            bat 'terraform output -json'
          }
        }
      }
    }
  }

  post {
    always {
      // Do NOT wrap in dir(); keep path relative to workspace to retain FilePath context
      archiveArtifacts artifacts: 'infra/plan.tfplan', fingerprint: true, allowEmptyArchive: true
    }
  }
}
