pipeline {
  agent { label 'win-dev' }
  options { disableConcurrentBuilds(); timestamps() }

  parameters {
    choice(name: 'TF_ACTION', choices: ['APPLY','DESTROY'], description: 'Terraform action')
    string(
      name: 'CIDR_CRED_IDS',
      defaultValue: 'shankar_ip_cidr',
      description: 'Comma-separated Secret Text credential IDs; each secret value is a CIDR like 49.207.145.12/32'
    )
  }

  environment {
    TF_IN_AUTOMATION = 'true'
    TF_DIR           = 'infra'
    PATH             = "C:\\binaries\\terraform;${env.PATH}" // terraform.exe in PATH
  }

  stages {
    stage('Tool Versions') {
      steps {
        bat 'git --version'
        bat 'terraform --version'
        bat 'node --version'
        bat 'dotnet --version'
      }
    }

    stage('Checkout') {
      steps {
        cleanWs()
        checkout scm
        bat 'dir /s /b *.csproj || ver >NUL'
      }
    }

    stage('Bind CIDR Secrets -> TF_VARs') {
      steps {
        script {
          // Parse credential IDs (no spread operator)
          def raw = params.CIDR_CRED_IDS.tokenize(',')
          def ids = []
          for (r in raw) { def t = r.trim(); if (t) ids.add(t) }
          if (ids.isEmpty()) { error 'No CIDR credential IDs provided.' }

          // Build dynamic bindings for CIDRs + SA password
          def bindings = []
          int i = 0
          for (id in ids) {
            bindings.add([$class: 'StringBinding', credentialsId: id, variable: "CIDR_${i}"])
            i++
          }
          bindings.add([$class: 'StringBinding', credentialsId: 'sql_sa_password', variable: 'SQL_SA_PASSWORD'])

          withCredentials(bindings) {
            // Collect CIDRs using sandbox-safe env.get(...)
            def cidrs = []
            for (int j = 0; j < ids.size(); j++) {
              def v = (env.get("CIDR_${j}") ?: '').trim()
              if (!v) { error "Credential '${ids[j]}' is empty." }
              // light sanity; Terraform also validates with cidrnetmask()
              if (!v.contains('/')) { error "Credential '${ids[j]}' value '${v}' is not CIDR (missing /)." }
              cidrs.add(v)
            }

            // Build JSON list without JsonBuilder (sandbox-safe)
            def sb = new StringBuilder('[')
            for (int k = 0; k < cidrs.size(); k++) {
              if (k > 0) sb.append(',')
              sb.append('"').append(cidrs[k]).append('"')
            }
            sb.append(']')

            // Export as TF_VAR_* for Terraform
            env.TF_VAR_allowed_ssh_cidrs = sb.toString()
            env.TF_VAR_sql_sa_password   = env.get('SQL_SA_PASSWORD')

            echo "Loaded ${cidrs.size()} SSH CIDR(s) for allow-list."
          }
        }
      }
    }

    stage('Sanity (no stray tfvars)') {
      steps {
        dir("${env.WORKSPACE}\\${env.TF_DIR}") {
          powershell '''
            $ErrorActionPreference = "Stop"
            Write-Host "Auto-loaded tfvars (should be none):"
            Get-ChildItem -Force -Name *.tfvars,*.auto.tfvars,*.tfvars.json,*.auto.tfvars.json -ErrorAction SilentlyContinue | ForEach-Object { "  - $_" }
            if (-not $env:TF_VAR_allowed_ssh_cidrs) { throw "TF_VAR_allowed_ssh_cidrs not set"; }
            if (-not $env:TF_VAR_sql_sa_password)   { throw "TF_VAR_sql_sa_password not set"; }
          '''
        }
      }
    }

    stage('Terraform Init & Run') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_secrets_shankar']]) {
          dir("${env.WORKSPACE}\\${env.TF_DIR}") {
            powershell '''
              $ErrorActionPreference = "Stop"
              terraform init -reconfigure -upgrade -no-color -input=false

              if ($env:TF_ACTION -eq "DESTROY") {
                terraform plan  -destroy -out=tfplan -no-color -input=false
                terraform apply -no-color -input=false -auto-approve tfplan
              } else {
                terraform plan  -out=tfplan -no-color -input=false
                terraform apply -no-color -input=false -auto-approve tfplan
                terraform output
                terraform output -json | Out-File -FilePath tf-outputs.json -Encoding utf8
              }
            '''
          }
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: "${TF_DIR}\\tfplan, ${TF_DIR}\\tf-outputs.json", allowEmptyArchive: true
      cleanWs()
    }
  }
}
