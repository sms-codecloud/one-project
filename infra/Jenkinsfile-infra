pipeline {
  agent { label 'win-dev' } // your Windows 11 Jenkins agent label
  options { disableConcurrentBuilds(); timestamps() }

  parameters {
    choice(name: 'TF_ACTION', choices: ['APPLY','DESTROY'], description: 'Terraform action')
    choice(name: 'INSTANCE_TYPE', choices: ['t3.micro','t2.micro','t3.small'], description: 'EC2 size (t3.micro is cheapest; t3.small is NOT free-tier)')
    string(name: 'HTTP_CIDR',   defaultValue: '0.0.0.0/0', description: 'CIDR allowed to HTTP 80')
    string(name: 'RDP_CIDR',    defaultValue: '0.0.0.0/0', description: 'CIDR allowed to RDP 3389')
    string(name: 'KEY_NAME',    defaultValue: 'win-one-project-key-pair', description: 'EC2 key pair name (optional if only using SSM)')
    string(name: 'AWS_REGION',  defaultValue: 'ap-south-1', description: 'AWS region')
    string(name: 'VPC_ID',      defaultValue: 'vpc-0eb3bcb56d10aaefe', description: 'Existing VPC ID (leave empty to create new)')
    string(name: 'SUBNET_ID',   defaultValue: 'subnet-0e55663670ec1908c', description: 'Existing Subnet ID (leave empty to create new)')
    password(name: 'MYSQL_ROOT_PASSWORD', defaultValue: '', description: 'MySQL root password')
    password(name: 'MYSQL_APP_PASSWORD',  defaultValue: '', description: 'MySQL app/user password')
  }

  environment {
    TF_IN_AUTOMATION = 'true'
    TF_DIR = 'infra'
  }

  stages {
    stage('Checkout') {
      steps {
        deleteDir()
        checkout scm
        bat 'dir'
      }
    }

    stage('Terraform Init/Plan/Apply') {
      steps {
        withCredentials([
          [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_secrets_shankar']
        ]) {
          dir('infra') {
            bat '''
              @echo off
              rem --- DO NOT ECHO SECRETS ---
              set TF_VAR_mysql_root_password=%MYSQL_ROOT_PASSWORD%
              set TF_VAR_mysql_app_password=%MYSQL_APP_PASSWORD%
              @echo on

              setlocal EnableExtensions EnableDelayedExpansion
              set "PATH=C:\\binaries\\terraform;!PATH!"

              terraform --version
              terraform init -reconfigure -upgrade -no-color

              rem Build non-secret args only
              set "TF_ARGS=-var=region=%AWS_REGION% -var=instance_type=%INSTANCE_TYPE% -var=key_name=%KEY_NAME% -var=http_cidr=%HTTP_CIDR% -var=rdp_cidr=%RDP_CIDR%"

              if not "%VPC_ID%"==""    set "TF_ARGS=%TF_ARGS% -var=vpc_id=%VPC_ID%"
              if not "%SUBNET_ID%"=="" set "TF_ARGS=%TF_ARGS% -var=subnet_id=%SUBNET_ID%"

              if /I "%TF_ACTION%"=="APPLY" (
                terraform plan %TF_ARGS% -out=plan.tfplan -no-color -input=false
                if errorlevel 1 exit /b !errorlevel!
                terraform apply -auto-approve plan.tfplan -no-color -input=false
                if errorlevel 1 exit /b !errorlevel!
              ) else (
                terraform plan -destroy %TF_ARGS% -out=destroy.tfplan -no-color -input=false
                if errorlevel 1 exit /b !errorlevel!
                terraform apply -auto-approve destroy.tfplan -no-color -input=false
                if errorlevel 1 exit /b !errorlevel!
              )

              terraform output -json
            '''
          }
        }
      }
    }


    stage('Outputs') {
      steps {
        dir('infra') {
          withEnv(['PATH+TERRAFORM=C:\\binaries\\terraform']) {
            bat 'terraform output -json'
          }
        }
      }
    }
  }

  post {
    always {
      // Do NOT wrap in dir(); keep path relative to workspace to retain FilePath context
      archiveArtifacts artifacts: 'infra/plan.tfplan', fingerprint: true, allowEmptyArchive: true
    }
  }
}
