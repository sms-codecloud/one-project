pipeline {
  agent { label 'win-dev' }
  options { disableConcurrentBuilds(); timestamps() }

  parameters {
    choice(name: 'TF_ACTION', choices: ['APPLY','PLAN','DESTROY'], description: 'Terraform action')
    string(name: 'AWS_REGION',  defaultValue: 'ap-south-1', description: 'Region')
    choice(name: 'INSTANCE_TYPE', choices: ['t3.small','t3.micro'], description: 'EC2 size')
    string(name: 'KEY_NAME',    defaultValue: '', description: 'EC2 key pair (leave empty to rely on SSM)')
    string(name: 'HTTP_CIDR',   defaultValue: '0.0.0.0/0', description: 'CIDR for HTTP 80')
    string(name: 'RDP_CIDR',    defaultValue: '0.0.0.0/0', description: 'CIDR for RDP 3389')

    // prompt user each run (masked)
    password(name: 'MYSQL_ROOT_PASSWORD', defaultValue: '', description: 'MySQL root password')
    password(name: 'MYSQL_APP_PASSWORD',  defaultValue: '', description: 'MySQL app/user password')
  }

  stages {
    stage('Terraform apply/Plan/destroy') {
      steps {
        withCredentials([
          [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_secrets_shankar']
        ]) {
          dir('infra') {
            bat '''
              @echo off
              rem --- IMPORTANT: keep delayed expansion OFF while setting secrets ---
              setlocal DisableDelayedExpansion

              rem Secrets to Terraform via TF_VAR_* (Terraform auto-loads them as variables)
              set "TF_VAR_mysql_root_password=%MYSQL_ROOT_PASSWORD%"
              set "TF_VAR_mysql_app_password=%MYSQL_APP_PASSWORD%"

              rem (Optional sanity checks â€“ do NOT echo values)
              if defined TF_VAR_mysql_root_password (echo TF_VAR_mysql_root_password set) else (echo MISSING TF_VAR_mysql_root_password & exit /b 1)
              if defined TF_VAR_mysql_app_password  (echo TF_VAR_mysql_app_password  set) else (echo MISSING TF_VAR_mysql_app_password  & exit /b 1)

              rem Tooling
              set "PATH=C:\\binaries\\terraform;%PATH%"
              terraform --version

              rem Build NON-secret args only (use %%VAR%%, not !VAR!)
              set "TF_ARGS=-var=region=%AWS_REGION% -var=instance_type=%INSTANCE_TYPE% -var=key_name=%KEY_NAME% -var=http_cidr=%HTTP_CIDR% -var=rdp_cidr=%RDP_CIDR%"

              terraform init -reconfigure -upgrade -no-color
              if errorlevel 1 exit /b %errorlevel%

              if /I "%TF_ACTION%"=="PLAN" (
                terraform plan %TF_ARGS% -out=plan.tfplan -no-color -input=false
                if errorlevel 1 exit /b %errorlevel%
                terraform apply -auto-approve plan.tfplan -no-color -input=false
                if errorlevel 1 exit /b %errorlevel%
              )
              if /I "%TF_ACTION%"=="APPLY" (
                terraform plan %TF_ARGS% -out=plan.tfplan -no-color -input=false
                if errorlevel 1 exit /b %errorlevel%
                terraform apply -auto-approve plan.tfplan -no-color -input=false
                if errorlevel 1 exit /b %errorlevel%
              )
              if /I "%TF_ACTION%"=="DESTROY" (
                terraform plan -destroy %TF_ARGS% -out=destroy.tfplan -no-color -input=false
                if errorlevel 1 exit /b %errorlevel%
                terraform apply -auto-approve destroy.tfplan -no-color -input=false
                if errorlevel 1 exit /b %errorlevel%
              ) else (
                echo NO ACTION
              )

              terraform output -json
          '''
          }
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'infra/*.tfplan', fingerprint: true, allowEmptyArchive: true
    }
  }
}
