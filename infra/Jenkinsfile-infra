pipeline {
  agent { label 'win-dev' }
  options { disableConcurrentBuilds(); timestamps(); ansiColor('xterm') }

  parameters {
    choice (name: 'TF_ACTION',       choices: ['APPLY','PLAN','DESTROY'], description: 'Terraform action')
    string (name: 'AWS_REGION',      defaultValue: 'ap-south-1',          description: 'AWS region')
    choice (name: 'INSTANCE_TYPE',   choices: ['t3.small','t3.micro'],    description: 'EC2 instance size')
    string (name: 'KEY_NAME',        defaultValue: 'win-one-project-key-pair', description: 'EC2 key pair (leave empty to rely on SSM)')
    string (name: 'HTTP_CIDR',       defaultValue: '0.0.0.0/0',           description: 'CIDR for HTTP 80')
    string (name: 'RDP_CIDR',        defaultValue: '0.0.0.0/0',           description: 'CIDR for RDP 3389')

    // Prompt every run; Jenkins masks these if printed (we never echo them)
    password(name: 'MYSQL_ROOT_PASSWORD', defaultValue: '1234567890', description: 'MySQL root password')
    password(name: 'MYSQL_APP_PASSWORD',  defaultValue: '1234567890', description: 'MySQL app/user password')
  }

  environment {
    TF_IN_AUTOMATION = '1'       // keeps TF non-interactive
    TF_INPUT         = 'false'
    NO_COLOR         = '1'
    PATH             = 'C:\\binaries\\terraform;%PATH%' // ensure terraform.exe is found
  }

  stages {
    stage('Checkout') {
      steps {
        // Jenkins already puts workspace under D:\jenkins-workspace\workspace\<job>
        checkout scm
      }
    }

    stage('Terraform Fmt & Validate') {
    steps {
      dir('infra') {
        bat '''
          @echo off
          setlocal
          terraform --version

          terraform init -reconfigure -upgrade -no-color
          if errorlevel 1 exit /b %errorlevel%

          echo === Checking Terraform formatting (non-blocking) ===
          terraform fmt -recursive -diff -no-color
          rem fmt exits with code 3 if files need reformatting â€” ignore that
          if %errorlevel% equ 1 exit /b 1
          if %errorlevel% gtr 1 echo Warning: Formatting issues detected, continuing...

          terraform validate -no-color
          if errorlevel 1 exit /b %errorlevel%
        '''
      }
    }
  }


    stage('Terraform Run') {
      agent { label 'win-dev' }
      options { ansiColor('xterm'); timestamps() }
      environment {
        TF_IN_AUTOMATION = '1'
        // Optional local plugin cache to speed init:
        TF_PLUGIN_CACHE_DIR = "${env.WORKSPACE}\\._tfplugincache"
        PATH = "C:\\binaries\\terraform;${env.PATH}"
      }
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_secrets_shankar']]) {
          dir("${env.WORKSPACE}\\infra") {          // << make sure this is your infra root
            bat '''
              @echo on
              setlocal EnableExtensions EnableDelayedExpansion

              rem ----- Inputs from Jenkins parameters -----
              rem Expect TF_ACTION in [PLAN|APPLY|DESTROY]
              echo TF_ACTION=%TF_ACTION%
              echo AWS_REGION=%AWS_REGION%

              rem Compose TF var args. Make sure all vars exist or leave them out.
              set "TF_ARGS=-var=region=%AWS_REGION% -var=instance_type=%INSTANCE_TYPE% -var=key_name=%KEY_NAME% -var=http_cidr=%HTTP_CIDR% -var=rdp_cidr=%RDP_CIDR%"

              rem ----- Init (idempotent) -----
              terraform init -no-color -input=false

              rem Validate to catch syntax issues early
              terraform validate -no-color

              rem ----- Branch on action -----
              IF /I "%TF_ACTION%"=="PLAN" (
                echo === Terraform PLAN ===
                terraform plan -no-color -input=false !TF_ARGS! -out=tfplan
                echo --- Human-readable plan ---
                terraform show -no-color tfplan
                exit /b 0
              ) ELSE IF /I "%TF_ACTION%"=="APPLY" (
                echo === Terraform APPLY ===
                terraform apply -no-color -input=false -auto-approve !TF_ARGS!
                exit /b !ERRORLEVEL!
              ) ELSE IF /I "%TF_ACTION%"=="DESTROY" (
                echo === Terraform DESTROY ===
                terraform destroy -no-color -input=false -auto-approve !TF_ARGS!
                exit /b !ERRORLEVEL!
              ) ELSE (
                echo Invalid TF_ACTION "%TF_ACTION%". Use PLAN, APPLY or DESTROY.
                exit /b 1
              )
            '''
            // archive the binary plan if you want to download it from Jenkins
            archiveArtifacts artifacts: 'infra/tfplan', onlyIfSuccessful: true, allowEmptyArchive: true
          }
        }
      }
    }



  }

  post {
    always {
      dir('infra') {
        archiveArtifacts artifacts: 'plan.tfplan, destroy.tfplan, plan.txt, tf-outputs.json', allowEmptyArchive: true, fingerprint: true
      }
    }
    failure {
      echo 'Build failed. Check the console for the exact failing Terraform step.'
    }
  }
}
