pipeline {
  agent { label 'win-dev' }
  options { disableConcurrentBuilds(); timestamps() }

  parameters {
    choice(name: 'TF_ACTION', choices: ['APPLY','DESTROY'], description: 'Terraform action')
    string(name: 'CIDR_CRED_IDS', defaultValue: 'shankar_ip_cidr', description: 'Comma-separated Secret Text credential IDs (each value is a CIDR)')
  }

  environment {
    TF_IN_AUTOMATION = 'true'
    TF_DIR           = 'infra'
    PATH             = "C:\\binaries\\terraform;${env.PATH}" // ensure terraform.exe in PATH
  }

  stages {
    stage('Tool Versions') {
      steps {
        bat 'git --version'
        bat 'terraform --version'
        bat 'node --version'
        bat 'dotnet --version'
      }
    }

    stage('Checkout') {
      steps {
        cleanWs()
        checkout scm
        bat 'dir /s /b *.csproj || ver >NUL'
      }
    }

    stage('Bind CIDR Secrets -> JSON (sandbox-safe)') {
      steps {
        script {
          // Parse credential IDs
          def raw = params.CIDR_CRED_IDS.tokenize(',')
          def ids = []
          for (r in raw) { def t = r.trim(); if (t) ids.add(t) }
          if (ids.isEmpty()) { error 'No CIDR credential IDs provided.' }

          // Bind CIDR secrets + SQL password
          def bindings = []
          int i = 0
          for (id in ids) { bindings.add([$class:'StringBinding', credentialsId:id, variable:"CIDR_${i}"]); i++ }
          bindings.add([$class:'StringBinding', credentialsId:'sql_sa_password', variable:'SQL_SA_PASSWORD'])

          withCredentials(bindings) {
            // Build JSON array entirely in PowerShell
            def cidrJson = powershell(returnStdout: true, script: '''
              $ErrorActionPreference = "Stop"
              $cidrs = @()
              $i = 0
              while ($true) {
                $name = "CIDR_$i"
                $val  = [Environment]::GetEnvironmentVariable($name)
                if ([string]::IsNullOrWhiteSpace($val)) { break }
                $val = $val.Trim()
                if (-not ($val -match "^\\d{1,3}(\\.\\d{1,3}){3}/(?:3[0-2]|[12]?\\d)$")) {
                  throw ("Invalid CIDR in {0}: {1} (expected like 203.0.113.10/32)" -f $name, $val)
                }
                $cidrs += $val
                $i++
              }
              if ($cidrs.Count -eq 0) { throw "No CIDRs found in bound credentials." }
              # Proper JSON array, e.g. ["1.2.3.4/32","5.6.7.0/24"]
              ($cidrs | ConvertTo-Json -Compress)
            ''').trim()

            env.ALLOWED_CIDRS_JSON       = cidrJson                    // e.g. ["27.7.30.218/32"]
            env.TF_VAR_sql_sa_password   = env.SQL_SA_PASSWORD         // secret stays in memory
            echo "Prepared ${ids.size()} SSH CIDR(s)."
          }
        }
      }
    }

    stage('Terraform Init & Run') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_secrets_shankar']]) {
          dir("${env.WORKSPACE}\\${env.TF_DIR}") {
            // Write cidrs.auto.tfvars.json WITHOUT BOM and with array type
            powershell '''
              $ErrorActionPreference = "Stop"
              if (-not $env:ALLOWED_CIDRS_JSON) { throw "ALLOWED_CIDRS_JSON not set" }
              # Ensure it's an array; if someone passed a single string by mistake, wrap it
              $json = $env:ALLOWED_CIDRS_JSON.Trim()
              if ($json -notmatch "^[\\[]") { $json = '["' + $json.Trim('"') + '"]' }

              $obj = @{ allowed_ssh_cidrs = (ConvertFrom-Json $json) }
              $content = ($obj | ConvertTo-Json -Compress)

              $enc = New-Object System.Text.UTF8Encoding($false)  # no BOM
              [System.IO.File]::WriteAllText("cidrs.auto.tfvars.json", $content, $enc)
              Write-Host "Wrote cidrs.auto.tfvars.json:"
              Write-Host $content
            '''

            powershell '''
              $ErrorActionPreference = "Stop"
              terraform init -reconfigure -upgrade -no-color -input=false

              if ($env:TF_ACTION -eq "DESTROY") {
                terraform plan  -destroy -out=tfplan -no-color -input=false
                terraform apply -no-color -input=false -auto-approve tfplan
              } else {
                terraform plan  -out=tfplan -no-color -input=false
                terraform apply -no-color -input=false -auto-approve tfplan
                terraform output
                terraform output -no-color -json | Out-File -FilePath tf-outputs.json -Encoding utf8
              }
            '''
          }
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: "${TF_DIR}\\tfplan, ${TF_DIR}\\tf-outputs.json", allowEmptyArchive: true
      cleanWs()
    }
  }
}
